# Generated by Django 2.2.2 on 2021-10-28 19:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sortname', models.CharField(max_length=25, null=True)),
                ('name', models.CharField(max_length=100, null=True)),
                ('phonecode', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'countries',
            },
        ),
        migrations.CreateModel(
            name='OmMembershipPlan',
            fields=[
                ('omp_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('omp_code', models.CharField(max_length=25, null=True)),
                ('omp_name', models.CharField(max_length=100, null=True)),
                ('omp_desc', models.CharField(default='', help_text='Subscription description', max_length=250, null=True)),
                ('omp_price', models.CharField(default=0, max_length=10, null=True)),
                ('omp_duration', models.PositiveSmallIntegerField(null=True)),
                ('omp_plan_type', models.CharField(choices=[('1', 'Individual'), ('2', 'Organizational'), ('3', 'Accreditation')], default='1', help_text='1=>Individual, 2=>Organizational, 3=>Accreditation', max_length=100)),
                ('omp_order_by', models.PositiveSmallIntegerField(null=True)),
                ('omp_is_display', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'om_membership_plan',
            },
        ),
        migrations.CreateModel(
            name='OmPrefix',
            fields=[
                ('op_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('op_code', models.CharField(max_length=25, null=True)),
                ('op_name', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'om_prefix',
            },
        ),
        migrations.CreateModel(
            name='OmSuffix',
            fields=[
                ('os_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('os_code', models.CharField(max_length=25, null=True)),
                ('os_name', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'om_suffix',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, null=True)),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='user.Country')),
            ],
            options={
                'db_table': 'states',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100, null=True)),
                ('middle_name', models.CharField(max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100, null=True)),
                ('organization', models.CharField(max_length=500, null=True)),
                ('title', models.CharField(max_length=100, null=True)),
                ('address1', models.CharField(max_length=500, null=True)),
                ('address2', models.CharField(max_length=500, null=True)),
                ('city', models.CharField(max_length=100, null=True)),
                ('zip_code', models.CharField(max_length=10, null=True)),
                ('int_province', models.CharField(max_length=500, null=True)),
                ('start_date', models.DateTimeField(help_text='Subscription start date', null=True)),
                ('end_date', models.DateTimeField(help_text='Subscription end date', null=True)),
                ('is_subscribe', models.IntegerField(default=0, help_text='1=>subscribe, 0=>not subscribe', null=True)),
                ('user_type', models.IntegerField(default=0, help_text='1=>admin, 2=>Individual, 3=>Organizational, 4=>Accredited, 5=> super admin', null=True)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('admin_user', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('membership', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='user.OmMembershipPlan')),
                ('user_oc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='user.Country')),
                ('user_op', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='user.OmPrefix')),
                ('user_os', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='user.OmSuffix')),
                ('user_ost', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='user.State')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user_master',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
